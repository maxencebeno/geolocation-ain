<?php

namespace Geolocation\AdminBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * SiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SiteRepository extends EntityRepository {

    //retourne la liste des sites de production qui ne correspondent pas au site courrant
    public function findSiteNotCurrent($id,$user) {
        //Création de la requête sql
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.id != :id')
           ->andWhere('s.user = :user')
           ->andWhere('s.main = :main')
           ->setParameters(['id'=> $id, 'user'=>$user,'main'=>false])
           ->orderBy('s.nom');
        
        //recuperation et retour du resultat de la requête
        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function findEntrepriseLike( $term, $limit = 10 )
    {
        $term = strtr($term, 'ÁÀÂÄÃÅÇÉÈÊËÍÏÎÌÑÓÒÔÖÕÚÙÛÜÝ', 'AAAAAACEEEEEIIIINOOOOOUUUUY');
        $term = strtr($term, 'áàâäãåçéèêëíìîïñóòôöõúùûüýÿ', 'aaaaaaceeeeiiiinooooouuuuyy');
        $qb = $this->createQueryBuilder('s');
        $qb ->select('s.nom')
            ->where('s.nom LIKE :term')
            ->orWhere('s.nom LIKE :termNoSpace')
            ->andWhere('s.main = :main')
            ->setParameters(['term' => '%' . $term . '%', 'termNoSpace' => '%' . str_replace(' ', '-', $term) . '%', 'main' => false])
            ->orderBy('s.nom')
            ->setMaxResults($limit);

        $arrayAss= $qb->getQuery()
            ->getArrayResult();

        // Transformer le tableau associatif en un tableau standard
        $array = array();
        foreach($arrayAss as $data)
        {
            $array[] = array("Entreprise"=>$data['nom']);
        }

        return $array;
    }

    public function findEntrepriseCustom( $term, $limit = 10 )
    {
        $term = strtr($term, 'ÁÀÂÄÃÅÇÉÈÊËÍÏÎÌÑÓÒÔÖÕÚÙÛÜÝ', 'AAAAAACEEEEEIIIINOOOOOUUUUY');
        $term = strtr($term, 'áàâäãåçéèêëíìîïñóòôöõúùûüýÿ', 'aaaaaaceeeeiiiinooooouuuuyy');
        $qb = $this->createQueryBuilder('s')
            ->where('s.nom LIKE :term')
            ->orWhere('s.nom LIKE :termNoSpace')
            ->andWhere('s.main = :main')
            ->setParameters(['term' => '%' . $term . '%', 'termNoSpace' => '%' . str_replace(' ', '-', $term) . '%', 'main' => false])
            ->orderBy('s.nom')
            ->setMaxResults($limit);

        return $qb->getQuery()->getOneOrNullResult();
    }

}
